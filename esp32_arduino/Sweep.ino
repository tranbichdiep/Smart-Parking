#include <SPI.h>
#include <MFRC522.h>
#include <WiFi.h>
#include <WebServer.h>
#include <WebSocketsServer.h>
#include <ESP32Servo.h>

// ƒê·ªãnh nghƒ©a ch√¢n k·∫øt n·ªëi RFID-RC522
#define RST_PIN     22 // Ch√¢n c·∫£m bi·∫øn RST
#define SS_PIN      21 // Ch√¢n c·∫£m bi·∫øn SS 
#define IR_PIN      5  // Ch√¢n c·∫£m bi·∫øn IR
#define SERVO_PIN   25  // Ch√¢n ƒëi·ªÅu khi·ªÉn servo

// Th√¥ng tin WiFi
const char* ssid = "OnePlus Ace 3V";
const char* password = "diepdiep";

// Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng
MFRC522 rfid(SS_PIN, RST_PIN);
WebServer server(9999);
WebSocketsServer webSocket = WebSocketsServer(9999);
Servo gateServo;
bool isPersonPresent = false;
bool isGateOpen = false;

void setup() {
  Serial.begin(115200);
  
  // Kh·ªüi t·∫°o SPI
  SPI.begin();
  rfid.PCD_Init();

  // K·∫øt n·ªëi WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println("");
  Serial.println("WiFi ƒë√£ k·∫øt n·ªëi");
  Serial.println("ƒê·ªãa ch·ªâ IP: ");
  Serial.println(WiFi.localIP());

  // Kh·ªüi t·∫°o WebSocket
  webSocket.begin();
  webSocket.onEvent(webSocketEvent);

  // Kh·ªüi t·∫°o server
  server.on("/", HTTP_GET, handleRoot);
  server.begin();

  // Th√™m c√†i ƒë·∫∑t cho IR v√† Servo
  pinMode(IR_PIN, INPUT);
  gateServo.attach(SERVO_PIN);
  gateServo.write(0); // ƒê√≥ng c·ªïng khi kh·ªüi ƒë·ªông
}

void loop() {
  server.handleClient();
  webSocket.loop();

  // ƒê·ªçc tr·∫°ng th√°i c·∫£m bi·∫øn IR
  bool irState = digitalRead(IR_PIN);
  
  // Ki·ªÉm tra c√≥ ng∆∞·ªùi kh√¥ng
  if (irState == LOW && !isPersonPresent) { // ƒêi·ªÅu ch·ªânh LOW/HIGH t√πy theo c·∫£m bi·∫øn c·ªßa b·∫°n
    isPersonPresent = true;
    Serial.println("Ph√°t hi·ªán ng∆∞·ªùi, s·∫µn s√†ng qu√©t th·∫ª");
  }

  // Ch·ªâ qu√©t th·∫ª khi c√≥ ng∆∞·ªùi
  if (isPersonPresent && rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
    String cardID = "";
    
    // ƒê·ªçc ID c·ªßa th·∫ª
    for (byte i = 0; i < rfid.uid.size; i++) {
      cardID += String(rfid.uid.uidByte[i], HEX);
    }
    
    // G·ª≠i ID th·∫ª qua WebSocket
    String jsonResponse = "{\"cardId\"üòï"" + cardID + "\"}";
    webSocket.broadcastTXT(jsonResponse);
    
    Serial.println("Th·∫ª ƒë∆∞·ª£c qu√©t: " + cardID);
    
    // M·ªü c·ªïng
    gateServo.write(90); // G√≥c m·ªü 90 ƒë·ªô
    isGateOpen = true;
    
    rfid.PICC_HaltA();
    rfid.PCD_StopCrypto1();
  }

  // Ki·ªÉm tra ng∆∞·ªùi ƒë√£ ƒëi qua ch∆∞a
  if (irState == HIGH && isPersonPresent) { // Kh√¥ng c√≤n ph√°t hi·ªán ng∆∞·ªùi
    isPersonPresent = false;
    if (isGateOpen) {
      delay(1000); // ƒê·ª£i 1 gi√¢y
      gateServo.write(0); // ƒê√≥ng c·ªïng
      isGateOpen = false;
      Serial.println("ƒê√≥ng c·ªïng");
    }
  }
}

// X·ª≠ l√Ω s·ª± ki·ªán WebSocket
void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {
  switch(type) {
    case WStype_DISCONNECTED:
      Serial.printf("[%u] Ng·∫Øt k·∫øt n·ªëi!\n", num);
      break;
    case WStype_CONNECTED:
      Serial.printf("[%u] ƒê√£ k·∫øt n·ªëi!\n", num);
      break;
  }
}

// Trang web ƒë∆°n gi·∫£n ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu
void handleRoot() {
  String html = "<html><head>";
  html += "<script>";
  html += "var socket = new WebSocket('ws://' + window.location.hostname + ':9999');";
  html += "socket.onmessage = function(event) {";
  html += "  var data = JSON.parse(event.data);";
  html += "  document.getElementById('cardId').innerHTML = 'Th·∫ª m·ªõi: ' + data.cardId;";
  html += "};";
  html += "</script>";
  html += "</head><body>";
  html += "<h1>ESP32 RFID Reader</h1>";
  html += "<div id='cardId'>ƒêang ƒë·ª£i th·∫ª...</div>";
  html += "</body></html>";
  server.send(200, "text/html", html);
}
