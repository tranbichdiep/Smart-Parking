#include <SPI.h>
#include <MFRC522.h>
#include <WiFi.h>
#include <WebServer.h>
#include <WebSocketsServer.h>
#include <ESP32Servo.h>

// ƒê·ªãnh nghƒ©a ch√¢n k·∫øt n·ªëi RFID-RC522
#define RST_PIN 22   // Ch√¢n c·∫£m bi·∫øn RST
#define SS_PIN 21    // Ch√¢n c·∫£m bi·∫øn SS
#define IR_PIN 5     // Ch√¢n c·∫£m bi·∫øn IR
#define SERVO_PIN 25 // Ch√¢n ƒëi·ªÅu khi·ªÉn servo

// ƒê·ªãnh nghƒ©a ch√¢n cho 4 c·∫£m bi·∫øn IR v√† LED t∆∞∆°ng ·ª©ng
#define IR_SLOT1_PIN 13 // IR c·∫£m bi·∫øn ch·ªó 1
#define IR_SLOT2_PIN 14 // IR c·∫£m bi·∫øn ch·ªó 2
#define IR_SLOT3_PIN 15 // IR c·∫£m bi·∫øn ch·ªó 3
#define IR_SLOT4_PIN 16 // IR c·∫£m bi·∫øn ch·ªó 4

#define LED_SLOT1_PIN 17 // LED ch·ªó 1
#define LED_SLOT2_PIN 18 // LED ch·ªó 2
#define LED_SLOT3_PIN 19 // LED ch·ªó 3
#define LED_SLOT4_PIN 20 // LED ch·ªó 4

// Th√¥ng tin WiFi
const char *ssid = "OnePlus Ace 3V";
const char *password = "diepdiep";

// Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng
MFRC522 rfid(SS_PIN, RST_PIN);
WebServer server(9999);
WebSocketsServer webSocket = WebSocketsServer(9999);
Servo gateServo;
bool isPersonPresent = false;
bool isGateOpen = false;
int currentAngle = 0; // G√≥c hi·ªán t·∫°i c·ªßa servo
const int STEP = 5;   // S·ªë ƒë·ªô thay ƒë·ªïi m·ªói b∆∞·ªõc
const int DELAY = 50; // Delay gi·ªØa c√°c b∆∞·ªõc (ms)

// Bi·∫øn tr·∫°ng th√°i ch·ªó ƒë·ªó xe
bool parkingSlots[4] = {false, false, false, false}; // false = tr·ªëng, true = c√≥ xe

void setup()
{
  Serial.begin(115200);

  // Kh·ªüi t·∫°o SPI
  SPI.begin();
  rfid.PCD_Init();

  // K·∫øt n·ªëi WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi ƒë√£ k·∫øt n·ªëi");
  Serial.println("ƒê·ªãa ch·ªâ IP: ");
  Serial.println(WiFi.localIP());

  // Kh·ªüi t·∫°o WebSocket
  webSocket.begin();
  webSocket.onEvent(webSocketEvent);

  // Kh·ªüi t·∫°o server
  server.on("/", HTTP_GET, handleRoot);
  server.begin();

  // Th√™m c√†i ƒë·∫∑t cho IR v√† Servo
  pinMode(IR_PIN, INPUT);
  gateServo.attach(SERVO_PIN);
  gateServo.write(0); // ƒê√≥ng c·ªïng khi kh·ªüi ƒë·ªông

  // Kh·ªüi t·∫°o ch√¢n cho IR sensors
  pinMode(IR_SLOT1_PIN, INPUT);
  pinMode(IR_SLOT2_PIN, INPUT);
  pinMode(IR_SLOT3_PIN, INPUT);
  pinMode(IR_SLOT4_PIN, INPUT);

  // Kh·ªüi t·∫°o ch√¢n cho LEDs
  pinMode(LED_SLOT1_PIN, OUTPUT);
  pinMode(LED_SLOT2_PIN, OUTPUT);
  pinMode(LED_SLOT3_PIN, OUTPUT);
  pinMode(LED_SLOT4_PIN, OUTPUT);
}

void loop()
{
  server.handleClient();
  webSocket.loop();

  // ƒê·ªçc tr·∫°ng th√°i c·∫£m bi·∫øn IR
  bool irState = digitalRead(IR_PIN);

  // Ki·ªÉm tra c√≥ ng∆∞·ªùi kh√¥ng
  if (irState == LOW && !isPersonPresent)
  { // ƒêi·ªÅu ch·ªânh LOW/HIGH t√πy theo c·∫£m bi·∫øn c·ªßa b·∫°n
    isPersonPresent = true;
    Serial.println("Ph√°t hi·ªán ng∆∞·ªùi, s·∫µn s√†ng qu√©t th·∫ª");
  }

  // Ch·ªâ qu√©t th·∫ª khi c√≥ ng∆∞·ªùi
  if (isPersonPresent && rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial())
  {
    String cardID = "";

    // ƒê·ªçc ID c·ªßa th·∫ª
    for (byte i = 0; i < rfid.uid.size; i++)
    {
      cardID += String(rfid.uid.uidByte[i], HEX);
    }

    // G·ª≠i ID th·∫ª qua WebSocket
    String jsonResponse = "{\"cardId\"üòï"
                          " + cardID + "\"}";
    webSocket.broadcastTXT(jsonResponse);

    Serial.println("Th·∫ª ƒë∆∞·ª£c qu√©t: " + cardID);

    // M·ªü c·ªïng
    openGateSmooth();

    rfid.PICC_HaltA();
    rfid.PCD_StopCrypto1();
  }

  // Ki·ªÉm tra ng∆∞·ªùi ƒë√£ ƒëi qua ch∆∞a
  if (irState == HIGH && isPersonPresent)
  { // Kh√¥ng c√≤n ph√°t hi·ªán ng∆∞·ªùi
    isPersonPresent = false;
    if (isGateOpen)
    {
      delay(1000); // ƒê·ª£i 1 gi√¢y
      closeGateSmooth();
      Serial.println("ƒê√≥ng c·ªïng");
    }
  }

  checkParkingSlots();
  delay(100); // Delay ƒë·ªÉ tr√°nh ƒë·ªçc qu√° nhanh
}

// X·ª≠ l√Ω s·ª± ki·ªán WebSocket
void webSocketEvent(uint8_t num, WStype_t type, uint8_t *payload, size_t length)
{
  switch (type)
  {
  case WStype_DISCONNECTED:
    Serial.printf("[%u] Ng·∫Øt k·∫øt n·ªëi!\n", num);
    break;
  case WStype_CONNECTED:
    Serial.printf("[%u] ƒê√£ k·∫øt n·ªëi!\n", num);
    break;
  }
}

// Trang web ƒë∆°n gi·∫£n ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu
void handleRoot()
{
  String html = "<html><head>";
  html += "<script>";
  html += "var socket = new WebSocket('ws://' + window.location.hostname + ':9999');";
  html += "socket.onmessage = function(event) {";
  html += "  var data = JSON.parse(event.data);";
  html += "  document.getElementById('cardId').innerHTML = 'Th·∫ª m·ªõi: ' + data.cardId;";
  html += "  if(data.type === 'parking') {";
  html += "    for(var i = 0; i < 4; i++) {";
  html += "      document.getElementById('slot" + String(i) + "').style.backgroundColor = data.slots[i] ? 'red' : 'green';";
  html += "    }";
  html += "  }";
  html += "};";
  html += "</script>";
  html += "</head><body>";
  html += "<h1>ESP32 RFID Reader</h1>";
  html += "<div id='cardId'>ƒêang ƒë·ª£i th·∫ª...</div>";
  html += "<div style='margin: 20px;'>";
  html += "<h2>Tr·∫°ng th√°i b√£i ƒë·ªó xe</h2>";
  for (int i = 0; i < 4; i++)
  {
    html += "<div id='slot" + String(i) + "' style='width:100px;height:100px;margin:10px;display:inline-block;background-color:" + (parkingSlots[i] ? "red" : "green") + "'>";
    html += "Ch·ªó " + String(i + 1);
    html += "</div>";
  }
  html += "</div>";
  html += "</body></html>";
  server.send(200, "text/html", html);
}

void openGateSmooth()
{
  for (int angle = currentAngle; angle <= 90; angle += STEP)
  {
    gateServo.write(angle);
    currentAngle = angle;
    delay(DELAY);
  }
  isGateOpen = true;
}

void closeGateSmooth()
{
  for (int angle = currentAngle; angle >= 0; angle -= STEP)
  {
    gateServo.write(angle);
    currentAngle = angle;
    delay(DELAY);
  }
  isGateOpen = false;
}

void checkParkingSlots()
{
  bool changed = false;
  bool slots[4];
  String changedSlots = "";

  // ƒê·ªçc tr·∫°ng th√°i c√°c c·∫£m bi·∫øn
  slots[0] = digitalRead(IR_SLOT1_PIN) == LOW;
  slots[1] = digitalRead(IR_SLOT2_PIN) == LOW;
  slots[2] = digitalRead(IR_SLOT3_PIN) == LOW;
  slots[3] = digitalRead(IR_SLOT4_PIN) == LOW;

  // Ki·ªÉm tra thay ƒë·ªïi v√† c·∫≠p nh·∫≠t LED
  for (int i = 0; i < 4; i++)
  {
    if (slots[i] != parkingSlots[i])
    {
      changed = true;
      parkingSlots[i] = slots[i];
      // B·∫≠t/t·∫Øt LED t∆∞∆°ng ·ª©ng
      digitalWrite(LED_SLOT1_PIN + i, slots[i] ? HIGH : LOW);

      // Th√™m slot thay ƒë·ªïi v√†o chu·ªói JSON
      if (changedSlots.length() > 0)
      {
        changedSlots += ",";
      }
      changedSlots += "\"" + String(i + 1) + "\":" + (slots[i] ? "true" : "false");
    }
  }

  // Ch·ªâ g·ª≠i th√¥ng tin khi c√≥ slot thay ƒë·ªïi
  if (changed)
  {
    String jsonResponse = "{\"type\":\"parking\",\"changes\":{" + changedSlots + "}}";
    webSocket.broadcastTXT(jsonResponse);
  }
}
